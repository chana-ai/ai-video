* 
* ==> Audit <==
* |-----------|-----------------------------|----------|----------|---------|---------------------|---------------------|
|  Command  |            Args             | Profile  |   User   | Version |     Start Time      |      End Time       |
|-----------|-----------------------------|----------|----------|---------|---------------------|---------------------|
| ip        |                             | minikube | shijiexu | v1.28.0 | 26 Apr 23 10:47 CST |                     |
| delete    |                             | minikube | shijiexu | v1.28.0 | 26 Apr 23 10:49 CST | 26 Apr 23 10:49 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 26 Apr 23 10:55 CST | 26 Apr 23 11:02 CST |
| dashboard |                             | minikube | shijiexu | v1.30.1 | 26 Apr 23 11:02 CST |                     |
| service   | hello-minikube              | minikube | shijiexu | v1.30.1 | 26 Apr 23 11:09 CST | 26 Apr 23 11:09 CST |
| start     | --kubernetes-version=latest | minikube | shijiexu | v1.30.1 | 26 Apr 23 11:10 CST | 26 Apr 23 11:13 CST |
| addons    | list                        | minikube | shijiexu | v1.30.1 | 26 Apr 23 11:15 CST | 26 Apr 23 11:15 CST |
| addons    | enable ingress              | minikube | shijiexu | v1.30.1 | 26 Apr 23 12:08 CST |                     |
| addons    | enable ingress              | minikube | shijiexu | v1.30.1 | 26 Apr 23 13:53 CST |                     |
| dashboard |                             | minikube | shijiexu | v1.30.1 | 26 Apr 23 13:59 CST |                     |
| start     |                             | minikube | shijiexu | v1.30.1 | 30 May 23 16:21 CST | 30 May 23 16:22 CST |
| stop      |                             | minikube | shijiexu | v1.30.1 | 30 May 23 17:58 CST | 30 May 23 17:58 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 30 May 23 19:08 CST | 30 May 23 19:09 CST |
| stop      |                             | minikube | shijiexu | v1.30.1 | 01 Jun 23 16:32 CST | 01 Jun 23 16:33 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 10 Jun 23 23:47 CST | 10 Jun 23 23:48 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 11 Nov 23 17:24 CST |                     |
| start     |                             | minikube | shijiexu | v1.30.1 | 11 Nov 23 17:24 CST | 11 Nov 23 17:24 CST |
| dashboard |                             | minikube | shijiexu | v1.30.1 | 15 Nov 23 15:20 CST |                     |
| service   | wordpress --url             | minikube | shijiexu | v1.30.1 | 15 Nov 23 22:18 CST | 15 Nov 23 22:18 CST |
| stop      |                             | minikube | shijiexu | v1.30.1 | 17 Nov 23 00:03 CST | 17 Nov 23 00:03 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 24 Nov 23 21:19 CST | 24 Nov 23 21:20 CST |
| dashboard |                             | minikube | shijiexu | v1.30.1 | 24 Nov 23 21:22 CST |                     |
| service   | kubectl --url               | minikube | shijiexu | v1.30.1 | 24 Nov 23 21:36 CST |                     |
| addons    | list                        | minikube | shijiexu | v1.30.1 | 25 Nov 23 14:03 CST | 25 Nov 23 14:03 CST |
| addons    | enable ingress              | minikube | shijiexu | v1.30.1 | 25 Nov 23 14:04 CST | 25 Nov 23 14:04 CST |
| stop      |                             | minikube | shijiexu | v1.30.1 | 24 Dec 23 15:11 CST | 24 Dec 23 15:11 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 26 Dec 23 22:31 CST | 26 Dec 23 22:32 CST |
| stop      |                             | minikube | shijiexu | v1.30.1 | 27 Dec 23 09:16 CST | 27 Dec 23 09:16 CST |
| dashboard |                             | minikube | shijiexu | v1.30.1 | 27 Dec 23 20:40 CST |                     |
| start     |                             | minikube | shijiexu | v1.30.1 | 07 Jan 24 11:08 CST | 07 Jan 24 11:09 CST |
| stop      |                             | minikube | shijiexu | v1.30.1 | 07 Jan 24 11:23 CST | 07 Jan 24 11:23 CST |
| start     |                             | minikube | shijiexu | v1.30.1 | 16 Sep 24 22:39 CST |                     |
|-----------|-----------------------------|----------|----------|---------|---------------------|---------------------|

* 
* ==> Last Start <==
* Log file created at: 2024/09/16 22:39:48
Running on machine: shijiexu-home
Binary: Built with gc go1.20.2 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0916 22:39:48.769781  640802 out.go:296] Setting OutFile to fd 1 ...
I0916 22:39:48.770073  640802 out.go:348] isatty.IsTerminal(1) = true
I0916 22:39:48.770076  640802 out.go:309] Setting ErrFile to fd 2...
I0916 22:39:48.770080  640802 out.go:348] isatty.IsTerminal(2) = true
I0916 22:39:48.770407  640802 root.go:336] Updating PATH: /home/shijiexu/.minikube/bin
I0916 22:39:48.772292  640802 out.go:303] Setting JSON to false
I0916 22:39:48.794838  640802 start.go:125] hostinfo: {"hostname":"shijiexu-home","uptime":41076,"bootTime":1726456513,"procs":487,"os":"linux","platform":"ubuntu","platformFamily":"debian","platformVersion":"22.04","kernelVersion":"5.15.0-121-generic","kernelArch":"x86_64","virtualizationSystem":"kvm","virtualizationRole":"host","hostId":"23f4f7db-c762-4bc2-a5a9-8fc7b97103a0"}
I0916 22:39:48.794991  640802 start.go:135] virtualization: kvm host
I0916 22:39:48.799323  640802 out.go:177] 😄  minikube v1.30.1 on Ubuntu 22.04
I0916 22:39:48.805586  640802 notify.go:220] Checking for updates...
I0916 22:39:48.806817  640802 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.27.0-rc.0
I0916 22:39:48.808225  640802 driver.go:375] Setting default libvirt URI to qemu:///system
I0916 22:39:48.894882  640802 docker.go:121] docker version: linux-27.1.1:Docker Engine - Community
I0916 22:39:48.895008  640802 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0916 22:39:49.066093  640802 info.go:266] docker info: {ID:8284a0d4-8516-40b4-afa9-4f09e3401e16 Containers:6 ContainersRunning:1 ContainersPaused:0 ContainersStopped:5 Images:30 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:32 OomKillDisable:false NGoroutines:46 SystemTime:2024-09-16 22:39:49.045354761 +0800 CST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:5.15.0-121-generic OperatingSystem:Ubuntu 22.04.4 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[https://5wxalzzb.mirror.aliyuncs.com/ https://hub-mirror.c.163.com/ https://mirror.iscas.ac.cn/ https://docker.m.daocloud.io/] Secure:true Official:true}} Mirrors:[https://5wxalzzb.mirror.aliyuncs.com/ https://hub-mirror.c.163.com/ https://mirror.iscas.ac.cn/ https://docker.m.daocloud.io/]} NCPU:12 MemTotal:33240059904 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:shijiexu-home Labels:[] ExperimentalBuild:false ServerVersion:27.1.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:2bf793ef6dc9a18e00cb12efb64355c2c9d5eb41 Expected:2bf793ef6dc9a18e00cb12efb64355c2c9d5eb41} RuncCommit:{ID:v1.1.13-0-g58aa920 Expected:v1.1.13-0-g58aa920} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.16.1] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.29.1]] Warnings:<nil>}}
I0916 22:39:49.066316  640802 docker.go:294] overlay module found
I0916 22:39:49.072425  640802 out.go:177] ✨  Using the docker driver based on existing profile
I0916 22:39:49.075482  640802 start.go:295] selected driver: docker
I0916 22:39:49.075494  640802 start.go:870] validating driver "docker" against &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:7900 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.27.0-rc.0 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.27.0-rc.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[dashboard:true default-storageclass:true ingress:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/shijiexu:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0916 22:39:49.075647  640802 start.go:881] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0916 22:39:49.075889  640802 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0916 22:39:49.159669  640802 info.go:266] docker info: {ID:8284a0d4-8516-40b4-afa9-4f09e3401e16 Containers:6 ContainersRunning:1 ContainersPaused:0 ContainersStopped:5 Images:30 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:32 OomKillDisable:false NGoroutines:46 SystemTime:2024-09-16 22:39:49.14753103 +0800 CST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:5.15.0-121-generic OperatingSystem:Ubuntu 22.04.4 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[https://5wxalzzb.mirror.aliyuncs.com/ https://hub-mirror.c.163.com/ https://mirror.iscas.ac.cn/ https://docker.m.daocloud.io/] Secure:true Official:true}} Mirrors:[https://5wxalzzb.mirror.aliyuncs.com/ https://hub-mirror.c.163.com/ https://mirror.iscas.ac.cn/ https://docker.m.daocloud.io/]} NCPU:12 MemTotal:33240059904 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:shijiexu-home Labels:[] ExperimentalBuild:false ServerVersion:27.1.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:2bf793ef6dc9a18e00cb12efb64355c2c9d5eb41 Expected:2bf793ef6dc9a18e00cb12efb64355c2c9d5eb41} RuncCommit:{ID:v1.1.13-0-g58aa920 Expected:v1.1.13-0-g58aa920} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.16.1] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.29.1]] Warnings:<nil>}}
I0916 22:39:49.181743  640802 cni.go:84] Creating CNI manager for ""
I0916 22:39:49.181783  640802 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0916 22:39:49.181821  640802 start_flags.go:319] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:7900 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.27.0-rc.0 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.27.0-rc.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[dashboard:true default-storageclass:true ingress:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/shijiexu:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0916 22:39:49.185603  640802 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I0916 22:39:49.191546  640802 cache.go:120] Beginning downloading kic base image for docker with docker
I0916 22:39:49.194663  640802 out.go:177] 🚜  Pulling base image ...
I0916 22:39:49.200052  640802 preload.go:132] Checking if preload exists for k8s version v1.27.0-rc.0 and runtime docker
I0916 22:39:49.200141  640802 image.go:79] Checking for docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 in local docker daemon
I0916 22:39:49.200152  640802 preload.go:148] Found local preload: /home/shijiexu/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.27.0-rc.0-docker-overlay2-amd64.tar.lz4
I0916 22:39:49.200168  640802 cache.go:57] Caching tarball of preloaded images
I0916 22:39:49.200459  640802 preload.go:174] Found /home/shijiexu/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.27.0-rc.0-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0916 22:39:49.200483  640802 cache.go:60] Finished verifying existence of preloaded tar for  v1.27.0-rc.0 on docker
I0916 22:39:49.200756  640802 profile.go:148] Saving config to /home/shijiexu/.minikube/profiles/minikube/config.json ...
I0916 22:39:49.267219  640802 image.go:83] Found docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 in local docker daemon, skipping pull
I0916 22:39:49.267233  640802 cache.go:143] docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 exists in daemon, skipping load
I0916 22:39:49.267245  640802 cache.go:193] Successfully downloaded all kic artifacts
I0916 22:39:49.267270  640802 start.go:364] acquiring machines lock for minikube: {Name:mkca7f38290ab9feefc464a72dc456a00e394f55 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0916 22:39:49.267398  640802 start.go:368] acquired machines lock for "minikube" in 101.424µs
I0916 22:39:49.267415  640802 start.go:96] Skipping create...Using existing machine configuration
I0916 22:39:49.267419  640802 fix.go:55] fixHost starting: 
I0916 22:39:49.267754  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:49.283368  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:49.283407  640802 fix.go:103] recreateIfNeeded on minikube: state= err=unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:49.283427  640802 fix.go:108] machineExists: false. err=machine does not exist
I0916 22:39:49.289221  640802 out.go:177] 🤷  docker "minikube" container is missing, will recreate.
I0916 22:39:49.292121  640802 delete.go:124] DEMOLISHING minikube ...
I0916 22:39:49.292249  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:49.307512  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
W0916 22:39:49.307563  640802 stop.go:75] unable to get state: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:49.307577  640802 delete.go:128] stophost failed (probably ok): ssh power off: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:49.308004  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:49.322875  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:49.322923  640802 delete.go:82] Unable to get host status for minikube, assuming it has already been deleted: state: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:49.323014  640802 cli_runner.go:164] Run: docker container inspect -f {{.Id}} minikube
W0916 22:39:49.338642  640802 cli_runner.go:211] docker container inspect -f {{.Id}} minikube returned with exit code 1
I0916 22:39:49.338662  640802 kic.go:367] could not find the container minikube to remove it. will try anyways
I0916 22:39:49.338739  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:49.354124  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
W0916 22:39:49.354166  640802 oci.go:84] error getting container status, will try to delete anyways: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:49.354250  640802 cli_runner.go:164] Run: docker exec --privileged -t minikube /bin/bash -c "sudo init 0"
W0916 22:39:49.369442  640802 cli_runner.go:211] docker exec --privileged -t minikube /bin/bash -c "sudo init 0" returned with exit code 1
I0916 22:39:49.369460  640802 oci.go:641] error shutdown minikube: docker exec --privileged -t minikube /bin/bash -c "sudo init 0": exit status 1
stdout:

stderr:
Error response from daemon: No such container: minikube
I0916 22:39:50.370209  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:50.405479  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:50.405550  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:50.405563  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:39:50.405656  640802 retry.go:31] will retry after 487.571419ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:50.894349  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:50.935226  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:50.935356  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:50.935383  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:39:50.935469  640802 retry.go:31] will retry after 829.604365ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:51.766011  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:51.779656  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:51.779703  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:51.779707  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:39:51.779720  640802 retry.go:31] will retry after 978.271259ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:51.815491  640802 lock.go:35] WriteFile acquiring /home/shijiexu/.minikube/last_update_check: {Name:mkb5236196eacd679bbb3169c0c13b4951a7e91a Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0916 22:39:51.818877  640802 out.go:177] 🎉  minikube 1.34.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.34.0
I0916 22:39:51.822135  640802 out.go:177] 💡  To disable this notice, run: 'minikube config set WantUpdateNotification false'

I0916 22:39:52.758605  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:52.780047  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:52.780079  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:52.780084  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:39:52.780104  640802 retry.go:31] will retry after 2.05620531s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:54.837526  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:54.851301  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:54.851327  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:54.851330  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:39:54.851343  640802 retry.go:31] will retry after 2.983634897s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:57.836035  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:39:57.875531  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:39:57.875613  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:39:57.875636  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:39:57.875690  640802 retry.go:31] will retry after 3.137136918s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:40:01.015170  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:40:01.029567  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:40:01.029595  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:40:01.029600  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:40:01.029626  640802 retry.go:31] will retry after 4.702873577s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:40:05.732872  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:40:05.775282  640802 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0916 22:40:05.775349  640802 oci.go:653] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0916 22:40:05.775360  640802 oci.go:655] temporary error: container minikube status is  but expect it to be exited
I0916 22:40:05.775414  640802 oci.go:88] couldn't shut down minikube (might be okay): verify shutdown: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
 
I0916 22:40:05.775553  640802 cli_runner.go:164] Run: docker rm -f -v minikube
I0916 22:40:05.811751  640802 cli_runner.go:164] Run: docker container inspect -f {{.Id}} minikube
W0916 22:40:05.839306  640802 cli_runner.go:211] docker container inspect -f {{.Id}} minikube returned with exit code 1
I0916 22:40:05.839477  640802 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0916 22:40:05.868618  640802 cli_runner.go:164] Run: docker network rm minikube
I0916 22:40:06.426208  640802 fix.go:115] Sleeping 1 second for extra luck!
I0916 22:40:07.427225  640802 start.go:125] createHost starting for "" (driver="docker")
I0916 22:40:07.442007  640802 out.go:204] 🔥  Creating docker container (CPUs=2, Memory=7900MB) ...
I0916 22:40:07.442308  640802 start.go:159] libmachine.API.Create for "minikube" (driver="docker")
I0916 22:40:07.442349  640802 client.go:168] LocalClient.Create starting
I0916 22:40:07.442689  640802 main.go:141] libmachine: Reading certificate data from /home/shijiexu/.minikube/certs/ca.pem
I0916 22:40:07.442912  640802 main.go:141] libmachine: Decoding PEM data...
I0916 22:40:07.442954  640802 main.go:141] libmachine: Parsing certificate...
I0916 22:40:07.443370  640802 main.go:141] libmachine: Reading certificate data from /home/shijiexu/.minikube/certs/cert.pem
I0916 22:40:07.443560  640802 main.go:141] libmachine: Decoding PEM data...
I0916 22:40:07.443595  640802 main.go:141] libmachine: Parsing certificate...
I0916 22:40:07.444258  640802 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0916 22:40:07.458127  640802 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0916 22:40:07.458180  640802 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I0916 22:40:07.458194  640802 cli_runner.go:164] Run: docker network inspect minikube
W0916 22:40:07.468636  640802 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I0916 22:40:07.468649  640802 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube not found
I0916 22:40:07.468658  640802 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube not found

** /stderr **
I0916 22:40:07.468728  640802 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0916 22:40:07.481933  640802 network.go:209] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0xc000fbd4f0}
I0916 22:40:07.481961  640802 network_create.go:123] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0916 22:40:07.482020  640802 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube
I0916 22:40:07.688726  640802 network_create.go:107] docker network minikube 192.168.49.0/24 created
I0916 22:40:07.688775  640802 kic.go:117] calculated static IP "192.168.49.2" for the "minikube" container
I0916 22:40:07.688978  640802 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0916 22:40:07.734026  640802 cli_runner.go:164] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0916 22:40:07.764855  640802 oci.go:103] Successfully created a docker volume minikube
I0916 22:40:07.764963  640802 cli_runner.go:164] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -d /var/lib
I0916 22:40:08.240979  640802 oci.go:107] Successfully prepared a docker volume minikube
I0916 22:40:08.241008  640802 preload.go:132] Checking if preload exists for k8s version v1.27.0-rc.0 and runtime docker
I0916 22:40:08.241026  640802 kic.go:190] Starting extracting preloaded images to volume ...
I0916 22:40:08.241144  640802 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /home/shijiexu/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.27.0-rc.0-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -I lz4 -xf /preloaded.tar -C /extractDir
I0916 22:40:10.658654  640802 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /home/shijiexu/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.27.0-rc.0-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -I lz4 -xf /preloaded.tar -C /extractDir: (2.417368314s)
I0916 22:40:10.658693  640802 kic.go:199] duration metric: took 2.417657 seconds to extract preloaded images to volume
W0916 22:40:10.658890  640802 cgroups_linux.go:77] Your kernel does not support swap limit capabilities or the cgroup is not mounted.
W0916 22:40:10.659042  640802 oci.go:240] Your kernel does not support CPU cfs period/quota or the cgroup is not mounted.
I0916 22:40:10.659222  640802 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0916 22:40:10.740612  640802 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=7900mb -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106
I0916 22:40:11.080257  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Running}}
I0916 22:40:11.093605  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0916 22:40:11.104769  640802 cli_runner.go:164] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0916 22:40:11.131733  640802 oci.go:144] the created container "minikube" has a running status.
I0916 22:40:11.131890  640802 kic.go:221] Creating ssh key for kic: /home/shijiexu/.minikube/machines/minikube/id_rsa...
I0916 22:40:11.469189  640802 kic_runner.go:191] docker (temp): /home/shijiexu/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0916 22:40:11.484858  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0916 22:40:11.494803  640802 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0916 22:40:11.494810  640802 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0916 22:40:11.524062  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0916 22:40:11.537355  640802 machine.go:88] provisioning docker machine ...
I0916 22:40:11.537374  640802 ubuntu.go:169] provisioning hostname "minikube"
I0916 22:40:11.537439  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:11.551540  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:11.551950  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:11.551958  640802 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0916 22:40:11.693467  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0916 22:40:11.693560  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:11.716785  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:11.717370  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:11.717388  640802 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0916 22:40:11.872849  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0916 22:40:11.872880  640802 ubuntu.go:175] set auth options {CertDir:/home/shijiexu/.minikube CaCertPath:/home/shijiexu/.minikube/certs/ca.pem CaPrivateKeyPath:/home/shijiexu/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/shijiexu/.minikube/machines/server.pem ServerKeyPath:/home/shijiexu/.minikube/machines/server-key.pem ClientKeyPath:/home/shijiexu/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/shijiexu/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/shijiexu/.minikube}
I0916 22:40:11.872944  640802 ubuntu.go:177] setting up certificates
I0916 22:40:11.872973  640802 provision.go:83] configureAuth start
I0916 22:40:11.873163  640802 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0916 22:40:11.926872  640802 provision.go:138] copyHostCerts
I0916 22:40:11.927007  640802 exec_runner.go:144] found /home/shijiexu/.minikube/ca.pem, removing ...
I0916 22:40:11.927031  640802 exec_runner.go:207] rm: /home/shijiexu/.minikube/ca.pem
I0916 22:40:11.927151  640802 exec_runner.go:151] cp: /home/shijiexu/.minikube/certs/ca.pem --> /home/shijiexu/.minikube/ca.pem (1082 bytes)
I0916 22:40:11.927483  640802 exec_runner.go:144] found /home/shijiexu/.minikube/cert.pem, removing ...
I0916 22:40:11.927505  640802 exec_runner.go:207] rm: /home/shijiexu/.minikube/cert.pem
I0916 22:40:11.928218  640802 exec_runner.go:151] cp: /home/shijiexu/.minikube/certs/cert.pem --> /home/shijiexu/.minikube/cert.pem (1127 bytes)
I0916 22:40:11.928484  640802 exec_runner.go:144] found /home/shijiexu/.minikube/key.pem, removing ...
I0916 22:40:11.928498  640802 exec_runner.go:207] rm: /home/shijiexu/.minikube/key.pem
I0916 22:40:11.928571  640802 exec_runner.go:151] cp: /home/shijiexu/.minikube/certs/key.pem --> /home/shijiexu/.minikube/key.pem (1675 bytes)
I0916 22:40:11.929506  640802 provision.go:112] generating server cert: /home/shijiexu/.minikube/machines/server.pem ca-key=/home/shijiexu/.minikube/certs/ca.pem private-key=/home/shijiexu/.minikube/certs/ca-key.pem org=shijiexu.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0916 22:40:12.044832  640802 provision.go:172] copyRemoteCerts
I0916 22:40:12.044917  640802 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0916 22:40:12.044959  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:12.056759  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:12.145082  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1082 bytes)
I0916 22:40:12.159963  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/machines/server.pem --> /etc/docker/server.pem (1208 bytes)
I0916 22:40:12.173733  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0916 22:40:12.186867  640802 provision.go:86] duration metric: configureAuth took 313.885568ms
I0916 22:40:12.186878  640802 ubuntu.go:193] setting minikube options for container-runtime
I0916 22:40:12.186985  640802 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.27.0-rc.0
I0916 22:40:12.187036  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:12.199502  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:12.199838  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:12.199846  640802 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0916 22:40:12.324824  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0916 22:40:12.324845  640802 ubuntu.go:71] root file system type: overlay
I0916 22:40:12.325020  640802 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0916 22:40:12.325137  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:12.345160  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:12.345543  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:12.345597  640802 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0916 22:40:12.472073  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0916 22:40:12.472133  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:12.483619  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:12.483964  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:12.483975  640802 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0916 22:40:16.167937  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2023-03-27 16:16:18.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2024-09-16 14:40:12.466807782 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0916 22:40:16.167983  640802 machine.go:91] provisioned docker machine in 4.630607336s
I0916 22:40:16.168006  640802 client.go:171] LocalClient.Create took 8.72564454s
I0916 22:40:16.168049  640802 start.go:167] duration metric: libmachine.API.Create for "minikube" took 8.725739807s
I0916 22:40:16.168070  640802 start.go:300] post-start starting for "minikube" (driver="docker")
I0916 22:40:16.168093  640802 start.go:328] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0916 22:40:16.168378  640802 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0916 22:40:16.168615  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:16.202589  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:16.324281  640802 ssh_runner.go:195] Run: cat /etc/os-release
I0916 22:40:16.332304  640802 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0916 22:40:16.332342  640802 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0916 22:40:16.332369  640802 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0916 22:40:16.332382  640802 info.go:137] Remote host: Ubuntu 20.04.5 LTS
I0916 22:40:16.332401  640802 filesync.go:126] Scanning /home/shijiexu/.minikube/addons for local assets ...
I0916 22:40:16.332686  640802 filesync.go:126] Scanning /home/shijiexu/.minikube/files for local assets ...
I0916 22:40:16.332879  640802 start.go:303] post-start completed in 164.792933ms
I0916 22:40:16.333670  640802 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0916 22:40:16.369638  640802 profile.go:148] Saving config to /home/shijiexu/.minikube/profiles/minikube/config.json ...
I0916 22:40:16.370021  640802 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0916 22:40:16.370100  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:16.394391  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:16.506246  640802 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0916 22:40:16.516931  640802 start.go:128] duration metric: createHost completed in 9.089667875s
I0916 22:40:16.517361  640802 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0916 22:40:16.549914  640802 fix.go:129] unexpected machine state, will restart: <nil>
I0916 22:40:16.549928  640802 machine.go:88] provisioning docker machine ...
I0916 22:40:16.549945  640802 ubuntu.go:169] provisioning hostname "minikube"
I0916 22:40:16.550031  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:16.570859  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:16.571464  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:16.571481  640802 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0916 22:40:16.770639  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0916 22:40:16.770852  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:16.817469  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:16.819818  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:16.819871  640802 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0916 22:40:17.011882  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0916 22:40:17.011912  640802 ubuntu.go:175] set auth options {CertDir:/home/shijiexu/.minikube CaCertPath:/home/shijiexu/.minikube/certs/ca.pem CaPrivateKeyPath:/home/shijiexu/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/shijiexu/.minikube/machines/server.pem ServerKeyPath:/home/shijiexu/.minikube/machines/server-key.pem ClientKeyPath:/home/shijiexu/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/shijiexu/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/shijiexu/.minikube}
I0916 22:40:17.011944  640802 ubuntu.go:177] setting up certificates
I0916 22:40:17.011957  640802 provision.go:83] configureAuth start
I0916 22:40:17.012192  640802 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0916 22:40:17.049546  640802 provision.go:138] copyHostCerts
I0916 22:40:17.049602  640802 exec_runner.go:144] found /home/shijiexu/.minikube/ca.pem, removing ...
I0916 22:40:17.049610  640802 exec_runner.go:207] rm: /home/shijiexu/.minikube/ca.pem
I0916 22:40:17.049682  640802 exec_runner.go:151] cp: /home/shijiexu/.minikube/certs/ca.pem --> /home/shijiexu/.minikube/ca.pem (1082 bytes)
I0916 22:40:17.049776  640802 exec_runner.go:144] found /home/shijiexu/.minikube/cert.pem, removing ...
I0916 22:40:17.049781  640802 exec_runner.go:207] rm: /home/shijiexu/.minikube/cert.pem
I0916 22:40:17.049819  640802 exec_runner.go:151] cp: /home/shijiexu/.minikube/certs/cert.pem --> /home/shijiexu/.minikube/cert.pem (1127 bytes)
I0916 22:40:17.049885  640802 exec_runner.go:144] found /home/shijiexu/.minikube/key.pem, removing ...
I0916 22:40:17.049890  640802 exec_runner.go:207] rm: /home/shijiexu/.minikube/key.pem
I0916 22:40:17.049961  640802 exec_runner.go:151] cp: /home/shijiexu/.minikube/certs/key.pem --> /home/shijiexu/.minikube/key.pem (1675 bytes)
I0916 22:40:17.050018  640802 provision.go:112] generating server cert: /home/shijiexu/.minikube/machines/server.pem ca-key=/home/shijiexu/.minikube/certs/ca.pem private-key=/home/shijiexu/.minikube/certs/ca-key.pem org=shijiexu.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0916 22:40:17.461402  640802 provision.go:172] copyRemoteCerts
I0916 22:40:17.461458  640802 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0916 22:40:17.461512  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:17.474182  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:17.563832  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1082 bytes)
I0916 22:40:17.577091  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/machines/server.pem --> /etc/docker/server.pem (1204 bytes)
I0916 22:40:17.590404  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0916 22:40:17.603232  640802 provision.go:86] duration metric: configureAuth took 591.265459ms
I0916 22:40:17.603248  640802 ubuntu.go:193] setting minikube options for container-runtime
I0916 22:40:17.603346  640802 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.27.0-rc.0
I0916 22:40:17.603392  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:17.613219  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:17.613513  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:17.613518  640802 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0916 22:40:17.748915  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0916 22:40:17.748950  640802 ubuntu.go:71] root file system type: overlay
I0916 22:40:17.749302  640802 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0916 22:40:17.749818  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:17.785399  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:17.785985  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:17.786076  640802 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0916 22:40:17.984524  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0916 22:40:17.984810  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:18.027282  640802 main.go:141] libmachine: Using SSH client type: native
I0916 22:40:18.028233  640802 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32768 <nil> <nil>}
I0916 22:40:18.028267  640802 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0916 22:40:18.238495  640802 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0916 22:40:18.238528  640802 machine.go:91] provisioned docker machine in 1.688586192s
I0916 22:40:18.238550  640802 start.go:300] post-start starting for "minikube" (driver="docker")
I0916 22:40:18.238620  640802 start.go:328] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0916 22:40:18.238894  640802 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0916 22:40:18.239139  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:18.277551  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:18.395804  640802 ssh_runner.go:195] Run: cat /etc/os-release
I0916 22:40:18.403700  640802 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0916 22:40:18.403746  640802 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0916 22:40:18.403778  640802 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0916 22:40:18.403792  640802 info.go:137] Remote host: Ubuntu 20.04.5 LTS
I0916 22:40:18.403811  640802 filesync.go:126] Scanning /home/shijiexu/.minikube/addons for local assets ...
I0916 22:40:18.403935  640802 filesync.go:126] Scanning /home/shijiexu/.minikube/files for local assets ...
I0916 22:40:18.403986  640802 start.go:303] post-start completed in 165.420615ms
I0916 22:40:18.404160  640802 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0916 22:40:18.404405  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:18.451305  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:18.574780  640802 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0916 22:40:18.586948  640802 fix.go:57] fixHost completed within 29.319516461s
I0916 22:40:18.586978  640802 start.go:83] releasing machines lock for "minikube", held for 29.319564424s
I0916 22:40:18.587221  640802 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0916 22:40:18.623076  640802 ssh_runner.go:195] Run: cat /version.json
I0916 22:40:18.623157  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:18.623185  640802 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0916 22:40:18.623282  640802 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0916 22:40:18.647490  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:18.647857  640802 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32768 SSHKeyPath:/home/shijiexu/.minikube/machines/minikube/id_rsa Username:docker}
I0916 22:40:19.870294  640802 ssh_runner.go:235] Completed: curl -sS -m 2 https://registry.k8s.io/: (1.247086635s)
I0916 22:40:19.870344  640802 ssh_runner.go:235] Completed: cat /version.json: (1.247257452s)
I0916 22:40:19.870486  640802 ssh_runner.go:195] Run: systemctl --version
I0916 22:40:19.874759  640802 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0916 22:40:19.878932  640802 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0916 22:40:19.900682  640802 cni.go:229] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0916 22:40:19.900760  640802 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0916 22:40:19.919076  640802 cni.go:261] disabled [/etc/cni/net.d/100-crio-bridge.conf] bridge cni config(s)
I0916 22:40:19.919091  640802 start.go:481] detecting cgroup driver to use...
I0916 22:40:19.919125  640802 detect.go:199] detected "systemd" cgroup driver on host os
I0916 22:40:19.919239  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0916 22:40:19.943537  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0916 22:40:19.961030  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0916 22:40:19.979102  640802 containerd.go:145] configuring containerd to use "systemd" as cgroup driver...
I0916 22:40:19.979274  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = true|g' /etc/containerd/config.toml"
I0916 22:40:19.996895  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0916 22:40:20.014404  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0916 22:40:20.030508  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0916 22:40:20.047394  640802 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0916 22:40:20.063401  640802 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0916 22:40:20.080817  640802 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0916 22:40:20.096042  640802 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0916 22:40:20.110682  640802 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0916 22:40:20.217685  640802 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0916 22:40:20.284649  640802 start.go:481] detecting cgroup driver to use...
I0916 22:40:20.284671  640802 detect.go:199] detected "systemd" cgroup driver on host os
I0916 22:40:20.284734  640802 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0916 22:40:20.292314  640802 cruntime.go:276] skipping containerd shutdown because we are bound to it
I0916 22:40:20.292383  640802 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0916 22:40:20.299866  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0916 22:40:20.309864  640802 ssh_runner.go:195] Run: which cri-dockerd
I0916 22:40:20.312253  640802 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0916 22:40:20.317528  640802 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0916 22:40:20.326235  640802 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0916 22:40:20.395532  640802 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0916 22:40:20.459227  640802 docker.go:538] configuring docker to use "systemd" as cgroup driver...
I0916 22:40:20.459241  640802 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (143 bytes)
I0916 22:40:20.469068  640802 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0916 22:40:20.560358  640802 ssh_runner.go:195] Run: sudo systemctl restart docker
I0916 22:40:22.812033  640802 ssh_runner.go:235] Completed: sudo systemctl restart docker: (2.251631097s)
I0916 22:40:22.812194  640802 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0916 22:40:22.929642  640802 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0916 22:40:22.982671  640802 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0916 22:40:23.043646  640802 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0916 22:40:23.100468  640802 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0916 22:40:23.108528  640802 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0916 22:40:23.165945  640802 ssh_runner.go:195] Run: sudo systemctl restart cri-docker
I0916 22:40:23.271943  640802 start.go:528] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0916 22:40:23.272046  640802 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0916 22:40:23.274616  640802 start.go:549] Will wait 60s for crictl version
I0916 22:40:23.274670  640802 ssh_runner.go:195] Run: which crictl
I0916 22:40:23.276961  640802 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0916 22:40:23.339609  640802 start.go:565] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  23.0.2
RuntimeApiVersion:  v1alpha2
I0916 22:40:23.339669  640802 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0916 22:40:23.397254  640802 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0916 22:40:23.431170  640802 out.go:204] 🐳  Preparing Kubernetes v1.27.0-rc.0 on Docker 23.0.2 ...
I0916 22:40:23.431273  640802 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0916 22:40:23.444988  640802 ssh_runner.go:195] Run: grep 192.168.49.1	host.minikube.internal$ /etc/hosts
I0916 22:40:23.447990  640802 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.49.1	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0916 22:40:23.456884  640802 preload.go:132] Checking if preload exists for k8s version v1.27.0-rc.0 and runtime docker
I0916 22:40:23.456984  640802 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0916 22:40:23.476235  640802 docker.go:639] Got preloaded images: -- stdout --
<none>:<none>
<none>:<none>
<none>:<none>
registry.k8s.io/kube-apiserver:v1.27.0-rc.0
registry.k8s.io/kube-scheduler:v1.27.0-rc.0
registry.k8s.io/kube-controller-manager:v1.27.0-rc.0
registry.k8s.io/kube-proxy:v1.27.0-rc.0
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/etcd:3.5.7-0
<none>:<none>
registry.k8s.io/pause:3.9
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
gcr.io/k8s-minikube/storage-provisioner:v5
<none>:<none>

-- /stdout --
I0916 22:40:23.476247  640802 docker.go:569] Images already preloaded, skipping extraction
I0916 22:40:23.476308  640802 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0916 22:40:23.491438  640802 docker.go:639] Got preloaded images: -- stdout --
<none>:<none>
<none>:<none>
<none>:<none>
registry.k8s.io/kube-apiserver:v1.27.0-rc.0
registry.k8s.io/kube-proxy:v1.27.0-rc.0
registry.k8s.io/kube-controller-manager:v1.27.0-rc.0
registry.k8s.io/kube-scheduler:v1.27.0-rc.0
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/etcd:3.5.7-0
<none>:<none>
registry.k8s.io/pause:3.9
<none>:<none>
<none>:<none>
<none>:<none>
<none>:<none>
gcr.io/k8s-minikube/storage-provisioner:v5
<none>:<none>

-- /stdout --
I0916 22:40:23.491448  640802 cache_images.go:84] Images are preloaded, skipping loading
I0916 22:40:23.491528  640802 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0916 22:40:23.506871  640802 cni.go:84] Creating CNI manager for ""
I0916 22:40:23.506885  640802 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0916 22:40:23.506891  640802 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0916 22:40:23.506901  640802 kubeadm.go:172] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.27.0-rc.0 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:systemd ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[hairpinMode:hairpin-veth runtimeRequestTimeout:15m]}
I0916 22:40:23.506981  640802 kubeadm.go:177] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.27.0-rc.0
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: systemd
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0916 22:40:23.507033  640802 kubeadm.go:968] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.27.0-rc.0/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.27.0-rc.0 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0916 22:40:23.507087  640802 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.27.0-rc.0
I0916 22:40:23.512439  640802 binaries.go:44] Found k8s binaries, skipping transfer
I0916 22:40:23.512492  640802 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0916 22:40:23.517026  640802 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (374 bytes)
I0916 22:40:23.526330  640802 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (357 bytes)
I0916 22:40:23.535371  640802 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2088 bytes)
I0916 22:40:23.543954  640802 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0916 22:40:23.545902  640802 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0916 22:40:23.551817  640802 certs.go:56] Setting up /home/shijiexu/.minikube/profiles/minikube for IP: 192.168.49.2
I0916 22:40:23.551829  640802 certs.go:186] acquiring lock for shared ca certs: {Name:mkb2a71d93378d556e53da0b178d935decd7376b Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0916 22:40:23.552028  640802 certs.go:195] skipping minikubeCA CA generation: /home/shijiexu/.minikube/ca.key
I0916 22:40:23.552159  640802 certs.go:195] skipping proxyClientCA CA generation: /home/shijiexu/.minikube/proxy-client-ca.key
I0916 22:40:23.552293  640802 certs.go:311] skipping minikube-user signed cert generation: /home/shijiexu/.minikube/profiles/minikube/client.key
I0916 22:40:23.552427  640802 certs.go:311] skipping minikube signed cert generation: /home/shijiexu/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0916 22:40:23.552556  640802 certs.go:311] skipping aggregator signed cert generation: /home/shijiexu/.minikube/profiles/minikube/proxy-client.key
I0916 22:40:23.552628  640802 certs.go:401] found cert: /home/shijiexu/.minikube/certs/home/shijiexu/.minikube/certs/ca-key.pem (1679 bytes)
I0916 22:40:23.552645  640802 certs.go:401] found cert: /home/shijiexu/.minikube/certs/home/shijiexu/.minikube/certs/ca.pem (1082 bytes)
I0916 22:40:23.552661  640802 certs.go:401] found cert: /home/shijiexu/.minikube/certs/home/shijiexu/.minikube/certs/cert.pem (1127 bytes)
I0916 22:40:23.552674  640802 certs.go:401] found cert: /home/shijiexu/.minikube/certs/home/shijiexu/.minikube/certs/key.pem (1675 bytes)
I0916 22:40:23.553049  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0916 22:40:23.565680  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0916 22:40:23.579026  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0916 22:40:23.591738  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0916 22:40:23.606067  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0916 22:40:23.621640  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I0916 22:40:23.637399  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0916 22:40:23.655536  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1671 bytes)
I0916 22:40:23.675212  640802 ssh_runner.go:362] scp /home/shijiexu/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0916 22:40:23.690543  640802 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0916 22:40:23.701559  640802 ssh_runner.go:195] Run: openssl version
I0916 22:40:23.706984  640802 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0916 22:40:23.713777  640802 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0916 22:40:23.716196  640802 certs.go:444] hashing: -rw-r--r-- 1 root root 1111 Apr 26  2023 /usr/share/ca-certificates/minikubeCA.pem
I0916 22:40:23.716233  640802 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0916 22:40:23.720341  640802 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0916 22:40:23.726795  640802 kubeadm.go:401] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:docker.io/kicbase/stable:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:7900 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.27.0-rc.0 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.27.0-rc.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[dashboard:true default-storageclass:true ingress:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/shijiexu:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0916 22:40:23.726906  640802 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0916 22:40:23.743097  640802 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0916 22:40:23.748977  640802 kubeadm.go:416] found existing configuration files, will attempt cluster restart
I0916 22:40:23.748984  640802 kubeadm.go:633] restartCluster start
I0916 22:40:23.749030  640802 ssh_runner.go:195] Run: sudo test -d /data/minikube
I0916 22:40:23.754340  640802 kubeadm.go:127] /data/minikube skipping compat symlinks: sudo test -d /data/minikube: Process exited with status 1
stdout:

stderr:
I0916 22:40:23.754904  640802 kubeconfig.go:135] verify returned: extract IP: "minikube" does not appear in /home/shijiexu/.kube/config
I0916 22:40:23.755193  640802 kubeconfig.go:146] "minikube" context is missing from /home/shijiexu/.kube/config - will repair!
I0916 22:40:23.755647  640802 lock.go:35] WriteFile acquiring /home/shijiexu/.kube/config: {Name:mk5dd200d6a50fd5eb9d3349437672f9f80697bd Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0916 22:40:23.760603  640802 ssh_runner.go:195] Run: sudo diff -u /var/tmp/minikube/kubeadm.yaml /var/tmp/minikube/kubeadm.yaml.new
I0916 22:40:23.766651  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:23.766725  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:23.775272  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:24.276335  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:24.276524  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:24.302542  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:24.776423  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:24.776645  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:24.801826  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:25.275586  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:25.275808  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:25.301020  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:25.775845  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:25.776004  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:25.800316  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:26.276035  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:26.276247  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:26.301924  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:26.775894  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:26.776094  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:26.801437  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:27.275390  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:27.275627  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:27.301641  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:27.775903  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:27.776104  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:27.801104  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:28.275885  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:28.276064  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:28.301190  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:28.775900  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:28.776087  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:28.803012  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:29.276272  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:29.276454  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:29.301497  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:29.775889  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:29.776088  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:29.800900  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:30.275370  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:30.275425  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:30.282971  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:30.775578  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:30.775800  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:30.800671  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:31.275962  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:31.276188  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:31.300657  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:31.776305  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:31.776522  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:31.800596  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:32.276082  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:32.276298  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:32.301270  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:32.775887  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:32.776080  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:32.800278  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:33.275729  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:33.275941  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:33.302231  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:33.775971  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:33.781737  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:33.806844  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:33.806865  640802 api_server.go:165] Checking apiserver status ...
I0916 22:40:33.807041  640802 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
W0916 22:40:33.828804  640802 api_server.go:169] stopped: unable to get apiserver pid: sudo pgrep -xnf kube-apiserver.*minikube.*: Process exited with status 1
stdout:

stderr:
I0916 22:40:33.828830  640802 kubeadm.go:608] needs reconfigure: apiserver error: timed out waiting for the condition
I0916 22:40:33.828837  640802 kubeadm.go:1120] stopping kube-system containers ...
I0916 22:40:33.828973  640802 ssh_runner.go:195] Run: docker ps -a --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0916 22:40:33.866735  640802 docker.go:465] Stopping containers: [1b74eda7ba90 90977abd7ad1 bac9bb13911f cb90cd54e3dc b079a4375e0e b627ef12756b 95c4c50ebd2d 51c7504d2a68 d7bd409a3a88 fb0bd192206a bcbd89d504f9 419c86a81882 c63a08c16e2e e3121e94c860 76785b99e5d9 851515db9208 5a96fc10f9f5 41984c47a7a3 a5416be0568e 61ee58eb523f e7d5e338a447 2f1fa89146e4 d156546911c1 7f3b19a36556 9f6678e1bde8 b984b325dafc 277add6dac95]
I0916 22:40:33.866873  640802 ssh_runner.go:195] Run: docker stop 1b74eda7ba90 90977abd7ad1 bac9bb13911f cb90cd54e3dc b079a4375e0e b627ef12756b 95c4c50ebd2d 51c7504d2a68 d7bd409a3a88 fb0bd192206a bcbd89d504f9 419c86a81882 c63a08c16e2e e3121e94c860 76785b99e5d9 851515db9208 5a96fc10f9f5 41984c47a7a3 a5416be0568e 61ee58eb523f e7d5e338a447 2f1fa89146e4 d156546911c1 7f3b19a36556 9f6678e1bde8 b984b325dafc 277add6dac95
I0916 22:40:33.889261  640802 ssh_runner.go:195] Run: sudo systemctl stop kubelet
I0916 22:40:33.906714  640802 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0916 22:40:33.915143  640802 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0916 22:40:33.915218  640802 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0916 22:40:33.924381  640802 kubeadm.go:710] reconfiguring cluster from /var/tmp/minikube/kubeadm.yaml
I0916 22:40:33.924397  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml"
E0916 22:40:33.981963  640802 kubeadm.go:714] sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml failed - will try once more: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml": Process exited with status 1
stdout:
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0916 14:40:33.969974    2808 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
W0916 14:40:33.978860    2808 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:33Z is after 2024-04-25T03:01:59Z
To see the stack trace of this error execute with --v=5 or higher
I0916 22:40:33.982000  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml"
I0916 22:40:34.032304  640802 kubeadm.go:637] restartCluster took 10.283315177s
W0916 22:40:34.032388  640802 out.go:239] 🤦  Unable to restart cluster, will reset it: run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml": Process exited with status 1
stdout:
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0916 14:40:34.023390    2824 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
W0916 14:40:34.028865    2824 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:34Z is after 2024-04-25T03:01:59Z
To see the stack trace of this error execute with --v=5 or higher

I0916 22:40:34.032421  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force"
I0916 22:40:39.639455  640802 ssh_runner.go:235] Completed: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force": (5.607012379s)
I0916 22:40:39.639578  640802 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I0916 22:40:39.656433  640802 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0916 22:40:39.669292  640802 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0916 22:40:39.669396  640802 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0916 22:40:39.681324  640802 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0916 22:40:39.681361  640802 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0916 22:40:39.739147  640802 kubeadm.go:322] W0916 14:40:39.738450    6240 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
I0916 22:40:39.772089  640802 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0916 22:40:39.776160  640802 kubeadm.go:322] 	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.15.0-121-generic\n", err: exit status 1
I0916 22:40:39.834279  640802 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0916 22:40:39.834394  640802 kubeadm.go:322] 	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
I0916 22:40:39.834603  640802 kubeadm.go:322] W0916 14:40:39.834113    6240 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.0-rc.0, falling back to the nearest etcd version (3.5.7-0)
I0916 22:40:39.972281  640802 kubeadm.go:322] W0916 14:40:39.971839    6240 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
I0916 22:40:39.972570  640802 kubeadm.go:322] error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:39Z is after 2024-04-25T03:01:59Z
I0916 22:40:39.978089  640802 out.go:204]     ▪ Generating certificates and keys ...
I0916 22:40:39.978209  640802 kubeadm.go:322] To see the stack trace of this error execute with --v=5 or higher
I0916 22:40:39.978259  640802 kubeadm.go:322] [init] Using Kubernetes version: v1.27.0-rc.0
I0916 22:40:39.978315  640802 kubeadm.go:322] [preflight] Running pre-flight checks
I0916 22:40:39.978416  640802 kubeadm.go:322] [preflight] The system verification failed. Printing the output from the verification:
I0916 22:40:39.978486  640802 kubeadm.go:322] [0;37mKERNEL_VERSION[0m: [0;32m5.15.0-121-generic[0m
I0916 22:40:39.978521  640802 kubeadm.go:322] [0;37mOS[0m: [0;32mLinux[0m
I0916 22:40:39.978584  640802 kubeadm.go:322] [0;37mCGROUPS_CPU[0m: [0;32menabled[0m
I0916 22:40:39.978636  640802 kubeadm.go:322] [0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
I0916 22:40:39.978693  640802 kubeadm.go:322] [0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
I0916 22:40:39.978751  640802 kubeadm.go:322] [0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
I0916 22:40:39.978799  640802 kubeadm.go:322] [0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
I0916 22:40:39.978859  640802 kubeadm.go:322] [0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
I0916 22:40:39.978919  640802 kubeadm.go:322] [0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
I0916 22:40:39.978965  640802 kubeadm.go:322] [0;37mCGROUPS_IO[0m: [0;32menabled[0m
I0916 22:40:39.979044  640802 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0916 22:40:39.979162  640802 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0916 22:40:39.979265  640802 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0916 22:40:39.979329  640802 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0916 22:40:39.979395  640802 kubeadm.go:322] [certs] Using existing ca certificate authority
I0916 22:40:39.979478  640802 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
W0916 22:40:39.979594  640802 out.go:239] 💢  initialization failed, will try again: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.27.0-rc.0
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.15.0-121-generic[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
[0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
[0;37mCGROUPS_IO[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0916 14:40:39.738450    6240 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.15.0-121-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
W0916 14:40:39.834113    6240 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.0-rc.0, falling back to the nearest etcd version (3.5.7-0)
W0916 14:40:39.971839    6240 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:39Z is after 2024-04-25T03:01:59Z
To see the stack trace of this error execute with --v=5 or higher

I0916 22:40:39.979661  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force"
I0916 22:40:41.500910  640802 ssh_runner.go:235] Completed: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force": (1.52123744s)
I0916 22:40:41.500961  640802 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I0916 22:40:41.507955  640802 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0916 22:40:41.508005  640802 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0916 22:40:41.512864  640802 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0916 22:40:41.512881  640802 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0916 22:40:41.541348  640802 kubeadm.go:322] [init] Using Kubernetes version: v1.27.0-rc.0
I0916 22:40:41.541393  640802 kubeadm.go:322] [preflight] Running pre-flight checks
I0916 22:40:41.566659  640802 kubeadm.go:322] [preflight] The system verification failed. Printing the output from the verification:
I0916 22:40:41.566708  640802 kubeadm.go:322] [0;37mKERNEL_VERSION[0m: [0;32m5.15.0-121-generic[0m
I0916 22:40:41.566736  640802 kubeadm.go:322] [0;37mOS[0m: [0;32mLinux[0m
I0916 22:40:41.566767  640802 kubeadm.go:322] [0;37mCGROUPS_CPU[0m: [0;32menabled[0m
I0916 22:40:41.566813  640802 kubeadm.go:322] [0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
I0916 22:40:41.566855  640802 kubeadm.go:322] [0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
I0916 22:40:41.566892  640802 kubeadm.go:322] [0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
I0916 22:40:41.566928  640802 kubeadm.go:322] [0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
I0916 22:40:41.566962  640802 kubeadm.go:322] [0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
I0916 22:40:41.567001  640802 kubeadm.go:322] [0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
I0916 22:40:41.567055  640802 kubeadm.go:322] [0;37mCGROUPS_IO[0m: [0;32menabled[0m
I0916 22:40:41.611973  640802 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0916 22:40:41.612076  640802 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0916 22:40:41.612136  640802 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0916 22:40:41.709408  640802 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0916 22:40:41.722493  640802 out.go:204]     ▪ Generating certificates and keys ...
I0916 22:40:41.722780  640802 kubeadm.go:322] [certs] Using existing ca certificate authority
I0916 22:40:41.723101  640802 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I0916 22:40:41.724086  640802 kubeadm.go:322] W0916 14:40:41.537311    7962 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
I0916 22:40:41.724563  640802 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0916 22:40:41.725275  640802 kubeadm.go:322] 	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.15.0-121-generic\n", err: exit status 1
I0916 22:40:41.725714  640802 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0916 22:40:41.726114  640802 kubeadm.go:322] 	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
I0916 22:40:41.726886  640802 kubeadm.go:322] W0916 14:40:41.611825    7962 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.0-rc.0, falling back to the nearest etcd version (3.5.7-0)
I0916 22:40:41.727838  640802 kubeadm.go:322] W0916 14:40:41.709848    7962 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
I0916 22:40:41.728805  640802 kubeadm.go:322] error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:41Z is after 2024-04-25T03:01:59Z
I0916 22:40:41.729105  640802 kubeadm.go:322] To see the stack trace of this error execute with --v=5 or higher
I0916 22:40:41.729176  640802 kubeadm.go:403] StartCluster complete in 18.002383787s
I0916 22:40:41.729234  640802 cri.go:52] listing CRI containers in root : {State:all Name:kube-apiserver Namespaces:[]}
I0916 22:40:41.729448  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-apiserver
I0916 22:40:41.789659  640802 cri.go:87] found id: ""
I0916 22:40:41.789673  640802 logs.go:277] 0 containers: []
W0916 22:40:41.789681  640802 logs.go:279] No container was found matching "kube-apiserver"
I0916 22:40:41.789687  640802 cri.go:52] listing CRI containers in root : {State:all Name:etcd Namespaces:[]}
I0916 22:40:41.789781  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=etcd
I0916 22:40:41.814735  640802 cri.go:87] found id: ""
I0916 22:40:41.814749  640802 logs.go:277] 0 containers: []
W0916 22:40:41.814758  640802 logs.go:279] No container was found matching "etcd"
I0916 22:40:41.814764  640802 cri.go:52] listing CRI containers in root : {State:all Name:coredns Namespaces:[]}
I0916 22:40:41.814834  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=coredns
I0916 22:40:41.839977  640802 cri.go:87] found id: ""
I0916 22:40:41.839989  640802 logs.go:277] 0 containers: []
W0916 22:40:41.839996  640802 logs.go:279] No container was found matching "coredns"
I0916 22:40:41.840001  640802 cri.go:52] listing CRI containers in root : {State:all Name:kube-scheduler Namespaces:[]}
I0916 22:40:41.840067  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-scheduler
I0916 22:40:41.864078  640802 cri.go:87] found id: ""
I0916 22:40:41.864091  640802 logs.go:277] 0 containers: []
W0916 22:40:41.864098  640802 logs.go:279] No container was found matching "kube-scheduler"
I0916 22:40:41.864104  640802 cri.go:52] listing CRI containers in root : {State:all Name:kube-proxy Namespaces:[]}
I0916 22:40:41.864181  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-proxy
I0916 22:40:41.888934  640802 cri.go:87] found id: ""
I0916 22:40:41.888950  640802 logs.go:277] 0 containers: []
W0916 22:40:41.888960  640802 logs.go:279] No container was found matching "kube-proxy"
I0916 22:40:41.888966  640802 cri.go:52] listing CRI containers in root : {State:all Name:kube-controller-manager Namespaces:[]}
I0916 22:40:41.889041  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-controller-manager
I0916 22:40:41.913803  640802 cri.go:87] found id: ""
I0916 22:40:41.913817  640802 logs.go:277] 0 containers: []
W0916 22:40:41.913827  640802 logs.go:279] No container was found matching "kube-controller-manager"
I0916 22:40:41.913834  640802 cri.go:52] listing CRI containers in root : {State:all Name:kindnet Namespaces:[]}
I0916 22:40:41.913904  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kindnet
I0916 22:40:41.936623  640802 cri.go:87] found id: ""
I0916 22:40:41.936632  640802 logs.go:277] 0 containers: []
W0916 22:40:41.936640  640802 logs.go:279] No container was found matching "kindnet"
I0916 22:40:41.936644  640802 cri.go:52] listing CRI containers in root : {State:all Name:storage-provisioner Namespaces:[]}
I0916 22:40:41.936697  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=storage-provisioner
I0916 22:40:41.954906  640802 cri.go:87] found id: ""
I0916 22:40:41.954917  640802 logs.go:277] 0 containers: []
W0916 22:40:41.954924  640802 logs.go:279] No container was found matching "storage-provisioner"
I0916 22:40:41.954929  640802 cri.go:52] listing CRI containers in root : {State:all Name:kubernetes-dashboard Namespaces:[]}
I0916 22:40:41.954991  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kubernetes-dashboard
I0916 22:40:41.974345  640802 cri.go:87] found id: ""
I0916 22:40:41.974356  640802 logs.go:277] 0 containers: []
W0916 22:40:41.974361  640802 logs.go:279] No container was found matching "kubernetes-dashboard"
I0916 22:40:41.974366  640802 cri.go:52] listing CRI containers in root : {State:all Name:controller_ingress Namespaces:[]}
I0916 22:40:41.974428  640802 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=controller_ingress
I0916 22:40:41.993815  640802 cri.go:87] found id: ""
I0916 22:40:41.993827  640802 logs.go:277] 0 containers: []
W0916 22:40:41.993832  640802 logs.go:279] No container was found matching "controller_ingress"
I0916 22:40:41.993838  640802 logs.go:123] Gathering logs for kubelet ...
I0916 22:40:41.993845  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo journalctl -u kubelet -n 400"
I0916 22:40:42.002444  640802 logs.go:123] Gathering logs for dmesg ...
I0916 22:40:42.002455  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo dmesg -PH -L=never --level warn,err,crit,alert,emerg | tail -n 400"
I0916 22:40:42.045449  640802 logs.go:123] Gathering logs for describe nodes ...
I0916 22:40:42.045482  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.27.0-rc.0/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig"
W0916 22:40:42.138301  640802 logs.go:130] failed describe nodes: command: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.27.0-rc.0/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig" /bin/bash -c "sudo /var/lib/minikube/binaries/v1.27.0-rc.0/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig": Process exited with status 1
stdout:

stderr:
E0916 14:40:42.128164    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.128389    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.130430    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.132347    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.134405    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
The connection to the server localhost:8443 was refused - did you specify the right host or port?
 output: 
** stderr ** 
E0916 14:40:42.128164    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.128389    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.130430    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.132347    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
E0916 14:40:42.134405    8259 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp [::1]:8443: connect: connection refused
The connection to the server localhost:8443 was refused - did you specify the right host or port?

** /stderr **
I0916 22:40:42.138317  640802 logs.go:123] Gathering logs for Docker ...
I0916 22:40:42.138328  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo journalctl -u docker -u cri-docker -n 400"
I0916 22:40:42.211321  640802 logs.go:123] Gathering logs for container status ...
I0916 22:40:42.211351  640802 ssh_runner.go:195] Run: /bin/bash -c "sudo `which crictl || echo crictl` ps -a || sudo docker ps -a"
W0916 22:40:42.228979  640802 out.go:369] Error starting cluster: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.27.0-rc.0
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.15.0-121-generic[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
[0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
[0;37mCGROUPS_IO[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0916 14:40:41.537311    7962 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.15.0-121-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
W0916 14:40:41.611825    7962 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.0-rc.0, falling back to the nearest etcd version (3.5.7-0)
W0916 14:40:41.709848    7962 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:41Z is after 2024-04-25T03:01:59Z
To see the stack trace of this error execute with --v=5 or higher
W0916 22:40:42.228992  640802 out.go:239] 
W0916 22:40:42.229116  640802 out.go:239] 💣  Error starting cluster: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.27.0-rc.0
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.15.0-121-generic[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
[0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
[0;37mCGROUPS_IO[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0916 14:40:41.537311    7962 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.15.0-121-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
W0916 14:40:41.611825    7962 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.0-rc.0, falling back to the nearest etcd version (3.5.7-0)
W0916 14:40:41.709848    7962 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:41Z is after 2024-04-25T03:01:59Z
To see the stack trace of this error execute with --v=5 or higher

W0916 22:40:42.229154  640802 out.go:239] 
W0916 22:40:42.229887  640802 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0916 22:40:42.239465  640802 out.go:177] 
W0916 22:40:42.245378  640802 out.go:239] ❌  Exiting due to GUEST_START: failed to start node: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.27.0-rc.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.27.0-rc.0
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.15.0-121-generic[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
[0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
[0;37mCGROUPS_IO[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0916 14:40:41.537311    7962 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.15.0-121-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
W0916 14:40:41.611825    7962 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.0-rc.0, falling back to the nearest etcd version (3.5.7-0)
W0916 14:40:41.709848    7962 certs.go:521] WARNING: could not validate bounds for certificate apiserver-kubelet-client: the certificate has expired: NotBefore: 2023-04-25 03:01:58 +0000 UTC, NotAfter: 2024-04-25 03:01:59 +0000 UTC
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate has expired or is not yet valid: current time 2024-09-16T14:40:41Z is after 2024-04-25T03:01:59Z
To see the stack trace of this error execute with --v=5 or higher

W0916 22:40:42.245416  640802 out.go:239] 
W0916 22:40:42.246113  640802 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0916 22:40:42.251219  640802 out.go:177] 

* 
* ==> Docker <==
* -- Logs begin at Mon 2024-09-16 14:40:11 UTC, end at Mon 2024-09-16 14:41:01 UTC. --
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"format\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox format\": invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"format\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox format\": invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"format\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Sep 16 14:40:41 minikube cri-dockerd[2472]: time="2024-09-16T14:40:41Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""

* 
* ==> container status <==
* CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID

* 
* ==> describe nodes <==
* 
* ==> dmesg <==
* [Sep16 05:07] kauditd_printk_skb: 5 callbacks suppressed
[Sep16 05:08] kauditd_printk_skb: 16 callbacks suppressed
[Sep16 05:13] kauditd_printk_skb: 24 callbacks suppressed
[Sep16 05:16] kauditd_printk_skb: 46 callbacks suppressed
[Sep16 05:17] kauditd_printk_skb: 14 callbacks suppressed
[Sep16 05:26] kauditd_printk_skb: 14 callbacks suppressed
[Sep16 05:32] kauditd_printk_skb: 22 callbacks suppressed
[Sep16 05:34] kauditd_printk_skb: 14 callbacks suppressed
[ +11.171201] kauditd_printk_skb: 38 callbacks suppressed
[  +6.012822] kauditd_printk_skb: 38 callbacks suppressed
[  +6.000688] kauditd_printk_skb: 62 callbacks suppressed
[  +6.620628] kauditd_printk_skb: 72 callbacks suppressed
[  +6.082575] kauditd_printk_skb: 18 callbacks suppressed
[  +5.613542] kauditd_printk_skb: 30 callbacks suppressed
[  +6.289841] kauditd_printk_skb: 42 callbacks suppressed
[  +6.145858] kauditd_printk_skb: 38 callbacks suppressed
[Sep16 05:35] kauditd_printk_skb: 62 callbacks suppressed
[ +10.337348] kauditd_printk_skb: 26 callbacks suppressed
[Sep16 05:51] kauditd_printk_skb: 14 callbacks suppressed
[ +12.315594] kauditd_printk_skb: 54 callbacks suppressed
[Sep16 06:11] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 06:26] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 06:41] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 06:56] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 07:11] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 07:46] process '/dist/electronic-wechat-linux-x64/electronic-wechat' started with executable stack
[Sep16 07:52] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 08:11] iwlwifi 0000:52:00.0: Unhandled alg: 0x3f0707
[  +0.000098] iwlwifi 0000:52:00.0: Unhandled alg: 0x3f0707
[Sep16 09:19] kauditd_printk_skb: 86 callbacks suppressed
[Sep16 09:20] kauditd_printk_skb: 150 callbacks suppressed
[  +5.002720] kauditd_printk_skb: 94 callbacks suppressed
[  +6.527192] kauditd_printk_skb: 70 callbacks suppressed
[  +5.595100] kauditd_printk_skb: 38 callbacks suppressed
[  +5.332964] kauditd_printk_skb: 74 callbacks suppressed
[ +10.040166] kauditd_printk_skb: 70 callbacks suppressed
[ +18.464970] kauditd_printk_skb: 18 callbacks suppressed
[Sep16 09:29] kauditd_printk_skb: 5 callbacks suppressed
[  +5.142995] kauditd_printk_skb: 4 callbacks suppressed
[Sep16 09:30] kauditd_printk_skb: 1 callbacks suppressed
[Sep16 09:36] kauditd_printk_skb: 22 callbacks suppressed
[Sep16 09:42] kauditd_printk_skb: 22 callbacks suppressed
[Sep16 09:57] kauditd_printk_skb: 22 callbacks suppressed
[ +11.135016] kauditd_printk_skb: 14 callbacks suppressed
[ +12.109398] kauditd_printk_skb: 4 callbacks suppressed
[Sep16 10:01] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 10:04] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[ +10.134659] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 10:05] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[ +16.631541] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 10:06] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 10:33] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[ +30.031853] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 10:59] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 11:00] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 11:22] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[ +30.128509] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 12:43] e1000e 0000:00:1f.6 enp0s31f6: Failed to disable ULP
[Sep16 13:08] i915 0000:00:02.0: [drm] *ERROR* Atomic update failure on pipe A (start=2 end=3) time 161 us, min 2146, max 2159, scanline start 2140, end 2161
[Sep16 14:20] i915 0000:00:02.0: [drm] *ERROR* Atomic update failure on pipe A (start=11 end=12) time 123 us, min 2146, max 2159, scanline start 2144, end 2160

* 
* ==> kernel <==
*  14:41:01 up 11:25,  0 users,  load average: 2.48, 2.33, 1.74
Linux minikube 5.15.0-121-generic #131-Ubuntu SMP Fri Aug 9 08:29:53 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
PRETTY_NAME="Ubuntu 20.04.5 LTS"

* 
* ==> kubelet <==
* -- Logs begin at Mon 2024-09-16 14:40:11 UTC, end at Mon 2024-09-16 14:41:01 UTC. --
-- No entries --

