# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy SAE

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-beijing
  REGISTRY: registry.cn-beijing.aliyuncs.com
  NAMESPACE: chana
  IMAGE: ai-video

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."
    - name: Checkout
      uses: actions/checkout@v4

    - name: config the .env
      run: | 
        echo "NEXT_PUBLIC_HOST='http://47.94.39.161'"> .env
                
    # 1.1 Login to ACR
    - name: Login to ACR with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
    - run: echo "TAG_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV   

    # 1.2 Build and push image to ACR
    - run: echo "start to setup Docker build"
    - name: Build and push image to ACR
      run: |
        docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG_VERSION" .
        docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG_VERSION"
        echo "Success push env version $NAMESPACE/$IMAGE:$TAG_VERSION to $REGISTRY/$NAMESPACE/$IMAGE:$TAG_VERSION"

    # # 1.3 Scan image in ACR
    # - name: Scan image in ACR
    #   uses: aliyun/acr-scan@v1
    #   with:
    #     region-id: "${{ env.REGION_ID }}"
    #     access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
    #     access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
    #     repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
    #     tag: "${{ env.TAG }}"
